# Generated by Django 5.2.4 on 2025-07-30 07:50

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dentistry', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dentist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('specialization', models.CharField(choices=[('general', 'General Dentistry'), ('orthodontics', 'Orthodontics'), ('oral_surgery', 'Oral Surgery'), ('periodontics', 'Periodontics'), ('endodontics', 'Endodontics'), ('prosthodontics', 'Prosthodontics'), ('pediatric', 'Pediatric Dentistry'), ('oral_pathology', 'Oral Pathology'), ('oral_medicine', 'Oral Medicine'), ('cosmetic', 'Cosmetic Dentistry')], default='general', max_length=20)),
                ('years_experience', models.PositiveIntegerField(default=0)),
                ('education', models.TextField()),
                ('certifications', models.TextField(blank=True)),
                ('clinic_address', models.TextField()),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('is_available', models.BooleanField(default=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dentist_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dentistry_dentists',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('appointment_date', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('appointment_type', models.CharField(choices=[('consultation', 'Consultation'), ('cleaning', 'Cleaning'), ('filling', 'Filling'), ('extraction', 'Extraction'), ('root_canal', 'Root Canal'), ('crown', 'Crown'), ('bridge', 'Bridge'), ('implant', 'Implant'), ('orthodontic', 'Orthodontic'), ('emergency', 'Emergency'), ('follow_up', 'Follow-up')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=15)),
                ('chief_complaint', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateTimeField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='dentistry.dentist')),
            ],
            options={
                'db_table': 'dentistry_appointments',
                'ordering': ['-appointment_date'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.CharField(max_length=20, unique=True)),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(max_length=15)),
                ('emergency_contact', models.CharField(max_length=100)),
                ('emergency_phone', models.CharField(max_length=15)),
                ('medical_history', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('medications', models.TextField(blank=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_number', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dental_patient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dentistry_patients',
            },
        ),
        migrations.CreateModel(
            name='DentalXray',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xray_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('xray_type', models.CharField(choices=[('periapical', 'Periapical'), ('bitewing', 'Bitewing'), ('panoramic', 'Panoramic'), ('cephalometric', 'Cephalometric'), ('cbct', 'CBCT'), ('occlusal', 'Occlusal')], max_length=20)),
                ('tooth_region', models.CharField(blank=True, max_length=50)),
                ('image_file', models.FileField(upload_to='dental_xrays/%Y/%m/')),
                ('findings', models.TextField()),
                ('diagnosis', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('radiation_dose', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('image_quality', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], default='good', max_length=20)),
                ('taken_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xrays', to='dentistry.appointment')),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='xrays', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='xrays', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_xrays',
                'ordering': ['-taken_date'],
            },
        ),
        migrations.CreateModel(
            name='DentalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brushing_frequency', models.PositiveIntegerField(default=2, help_text='Times per day')),
                ('flossing_frequency', models.PositiveIntegerField(default=1, help_text='Times per day')),
                ('mouthwash_use', models.BooleanField(default=False)),
                ('smoking', models.BooleanField(default=False)),
                ('alcohol_consumption', models.CharField(choices=[('none', 'None'), ('occasional', 'Occasional'), ('moderate', 'Moderate'), ('heavy', 'Heavy')], default='none', max_length=20)),
                ('teeth_grinding', models.BooleanField(default=False)),
                ('nail_biting', models.BooleanField(default=False)),
                ('previous_orthodontics', models.BooleanField(default=False)),
                ('previous_oral_surgery', models.BooleanField(default=False)),
                ('gum_disease_history', models.BooleanField(default=False)),
                ('tooth_sensitivity', models.BooleanField(default=False)),
                ('family_gum_disease', models.BooleanField(default=False)),
                ('family_tooth_loss', models.BooleanField(default=False)),
                ('family_oral_cancer', models.BooleanField(default=False)),
                ('chief_complaint', models.TextField(blank=True)),
                ('dental_anxiety_level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dental_history', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_dental_history',
            },
        ),
        migrations.CreateModel(
            name='DentalEmergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('emergency_type', models.CharField(choices=[('severe_pain', 'Severe Toothache'), ('trauma', 'Dental Trauma'), ('swelling', 'Facial Swelling'), ('bleeding', 'Uncontrolled Bleeding'), ('broken_tooth', 'Broken/Chipped Tooth'), ('lost_filling', 'Lost Filling/Crown'), ('orthodontic_emergency', 'Orthodontic Emergency'), ('abscess', 'Dental Abscess'), ('other', 'Other Emergency')], max_length=25)),
                ('severity', models.CharField(choices=[('low', 'Low - Can wait for regular appointment'), ('medium', 'Medium - Needs attention within 24 hours'), ('high', 'High - Needs immediate attention'), ('critical', 'Critical - Life-threatening')], max_length=10)),
                ('symptoms_description', models.TextField()),
                ('pain_level', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('onset_time', models.DateTimeField()),
                ('triage_notes', models.TextField(blank=True)),
                ('vital_signs', models.JSONField(blank=True, default=dict)),
                ('allergies_checked', models.BooleanField(default=False)),
                ('immediate_treatment', models.TextField(blank=True)),
                ('medications_given', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=True)),
                ('follow_up_scheduled', models.DateTimeField(blank=True, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attending_dentist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='emergencies', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergencies', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_emergencies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DentalAIAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('analysis_type', models.CharField(choices=[('xray_analysis', 'X-ray Analysis'), ('cavity_detection', 'Cavity Detection'), ('periodontal_assessment', 'Periodontal Assessment'), ('orthodontic_analysis', 'Orthodontic Analysis'), ('oral_cancer_screening', 'Oral Cancer Screening'), ('treatment_planning', 'Treatment Planning'), ('risk_assessment', 'Risk Assessment')], max_length=30)),
                ('input_image', models.FileField(blank=True, null=True, upload_to='dental_ai_input/%Y/%m/')),
                ('processed_image', models.FileField(blank=True, null=True, upload_to='dental_ai_output/%Y/%m/')),
                ('ai_findings', models.JSONField(default=dict, help_text='Structured AI findings')),
                ('confidence_level', models.CharField(choices=[('very_low', 'Very Low (0-20%)'), ('low', 'Low (21-40%)'), ('moderate', 'Moderate (41-60%)'), ('high', 'High (61-80%)'), ('very_high', 'Very High (81-100%)')], max_length=15)),
                ('risk_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('detected_conditions', models.JSONField(default=list, help_text='List of detected conditions')),
                ('treatment_suggestions', models.JSONField(default=list, help_text='AI-generated treatment suggestions')),
                ('differential_diagnosis', models.JSONField(default=list, help_text='Differential diagnosis options')),
                ('dentist_review', models.TextField(blank=True, help_text="Dentist's review of AI analysis")),
                ('approved_by_dentist', models.BooleanField(default=False)),
                ('clinical_notes', models.TextField(blank=True)),
                ('ai_model_version', models.CharField(default='DentalAI-v1.0', max_length=50)),
                ('processing_time', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_ai_analyses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='dentistry.patient'),
        ),
        migrations.CreateModel(
            name='PeriodontalChart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('chart_date', models.DateField(default=django.utils.timezone.now)),
                ('probing_depths', models.JSONField(default=dict, help_text='Probing depths for all teeth')),
                ('bleeding_on_probing', models.JSONField(default=dict, help_text='Bleeding points')),
                ('plaque_index', models.JSONField(default=dict, help_text='Plaque accumulation')),
                ('mobility', models.JSONField(default=dict, help_text='Tooth mobility')),
                ('recession', models.JSONField(default=dict, help_text='Gingival recession')),
                ('overall_periodontal_status', models.CharField(choices=[('healthy', 'Healthy'), ('gingivitis', 'Gingivitis'), ('mild_periodontitis', 'Mild Periodontitis'), ('moderate_periodontitis', 'Moderate Periodontitis'), ('severe_periodontitis', 'Severe Periodontitis')], default='healthy', max_length=25)),
                ('treatment_recommendations', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periodontal_charts', to='dentistry.appointment')),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodontal_charts', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodontal_charts', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_periodontal_charts',
                'ordering': ['-chart_date'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('treatment_name', models.CharField(max_length=200)),
                ('treatment_code', models.CharField(max_length=20)),
                ('tooth_number', models.CharField(blank=True, max_length=10)),
                ('surface', models.CharField(blank=True, max_length=10)),
                ('diagnosis', models.TextField()),
                ('treatment_plan', models.TextField()),
                ('procedure_notes', models.TextField(blank=True)),
                ('materials_used', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='planned', max_length=15)),
                ('start_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('insurance_coverage', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('patient_payment', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('complications', models.TextField(blank=True)),
                ('post_treatment_instructions', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='dentistry.appointment')),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='dentistry.patient')),
            ],
            options={
                'db_table': 'dentistry_treatments',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('medication_name', models.CharField(max_length=200)),
                ('medication_type', models.CharField(choices=[('antibiotic', 'Antibiotic'), ('painkiller', 'Painkiller'), ('anti_inflammatory', 'Anti-inflammatory'), ('mouthwash', 'Mouthwash'), ('fluoride', 'Fluoride'), ('other', 'Other')], max_length=20)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('quantity', models.PositiveIntegerField()),
                ('instructions', models.TextField()),
                ('contraindications', models.TextField(blank=True)),
                ('side_effects', models.TextField(blank=True)),
                ('prescribed_date', models.DateField(default=django.utils.timezone.now)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='dentistry.appointment')),
                ('dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='dentistry.dentist')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='dentistry.patient')),
                ('treatment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='dentistry.treatment')),
            ],
            options={
                'db_table': 'dentistry_prescriptions',
                'ordering': ['-prescribed_date'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('plan_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('chief_complaint', models.TextField()),
                ('clinical_findings', models.TextField()),
                ('diagnosis', models.TextField()),
                ('prognosis', models.TextField()),
                ('phase_1_treatment', models.TextField(blank=True, help_text='Emergency/Pain relief')),
                ('phase_2_treatment', models.TextField(blank=True, help_text='Disease control')),
                ('phase_3_treatment', models.TextField(blank=True, help_text='Restorative')),
                ('phase_4_treatment', models.TextField(blank=True, help_text='Maintenance')),
                ('total_estimated_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('insurance_coverage', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('patient_portion', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_plan', models.TextField(blank=True)),
                ('estimated_duration', models.PositiveIntegerField(help_text='Duration in weeks')),
                ('start_date', models.DateField()),
                ('estimated_completion', models.DateField()),
                ('actual_completion', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('proposed', 'Proposed'), ('approved', 'Approved'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='draft', max_length=15)),
                ('patient_approved', models.BooleanField(default=False)),
                ('patient_approval_date', models.DateTimeField(blank=True, null=True)),
                ('ai_risk_assessment', models.JSONField(blank=True, default=dict)),
                ('ai_treatment_suggestions', models.JSONField(blank=True, default=list)),
                ('ai_outcome_prediction', models.JSONField(blank=True, default=dict)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='dentistry.patient')),
                ('primary_dentist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='dentistry.dentist')),
            ],
            options={
                'db_table': 'dentistry_treatment_plans',
                'ordering': ['-created_at'],
            },
        ),
    ]
