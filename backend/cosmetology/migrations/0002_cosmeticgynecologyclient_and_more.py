# Generated by Django 4.2.7 on 2025-08-19 07:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cosmetology', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CosmeticGynecologyClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_at_first_pregnancy', models.PositiveIntegerField(blank=True, null=True)),
                ('number_of_pregnancies', models.PositiveIntegerField(default=0)),
                ('number_of_deliveries', models.PositiveIntegerField(default=0)),
                ('c_section_history', models.BooleanField(default=False)),
                ('menopause_status', models.BooleanField(default=False)),
                ('hormonal_therapy', models.BooleanField(default=False)),
                ('primary_concerns', models.JSONField(default=list, help_text='List of primary aesthetic concerns')),
                ('concern_severity', models.IntegerField(help_text='Severity of concerns (1-10 scale)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('gynecological_conditions', models.TextField(blank=True)),
                ('current_medications', models.TextField(blank=True)),
                ('previous_treatments', models.CharField(choices=[('none', 'None'), ('laser_therapy', 'Laser Therapy'), ('radiofrequency', 'Radiofrequency'), ('platelet_therapy', 'Platelet Rich Plasma'), ('surgical', 'Surgical Procedures'), ('topical_treatments', 'Topical Treatments'), ('hormone_therapy', 'Hormone Therapy')], default='none', max_length=50)),
                ('treatment_satisfaction', models.IntegerField(blank=True, help_text='Satisfaction with previous treatments (1-10)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('treatment_goals', models.TextField(help_text="Client's specific goals and expectations")),
                ('lifestyle_factors', models.TextField(blank=True, help_text='Exercise, diet, stress factors')),
                ('ai_risk_assessment', models.JSONField(blank=True, default=dict)),
                ('ai_treatment_recommendations', models.JSONField(blank=True, default=dict)),
                ('ai_recovery_prediction', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cosmetology_client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gynecology_profile', to='cosmetology.cosmetologyclient')),
            ],
        ),
        migrations.CreateModel(
            name='CosmeticGynecologyConsultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consultation_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('follow_up', 'Follow-up Required'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('chief_complaints', models.TextField()),
                ('physical_examination', models.TextField(blank=True)),
                ('client_expectations', models.TextField()),
                ('psychological_readiness', models.IntegerField(help_text='Psychological readiness for treatment (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('ai_analysis_complete', models.BooleanField(default=False)),
                ('ai_risk_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ai_recommended_treatments', models.JSONField(blank=True, default=list)),
                ('ai_treatment_timeline', models.JSONField(blank=True, default=dict)),
                ('ai_expected_outcomes', models.JSONField(blank=True, default=dict)),
                ('ai_contraindications', models.JSONField(blank=True, default=list)),
                ('doctor_notes', models.TextField(blank=True)),
                ('next_consultation', models.DateTimeField(blank=True, null=True)),
                ('consultation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmeticgynecologyclient')),
            ],
        ),
        migrations.CreateModel(
            name='CosmeticGynecologyTreatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('non_invasive', 'Non-Invasive'), ('minimally_invasive', 'Minimally Invasive'), ('surgical', 'Surgical'), ('combination', 'Combination Therapy')], max_length=30)),
                ('technology_used', models.CharField(choices=[('laser_co2', 'CO2 Laser'), ('laser_erbium', 'Erbium Laser'), ('radiofrequency', 'Radiofrequency'), ('ultrasound_focused', 'Focused Ultrasound'), ('platelet_therapy', 'Platelet Rich Plasma'), ('stem_cell', 'Stem Cell Therapy'), ('filler_injection', 'Hyaluronic Acid Fillers'), ('surgical_procedure', 'Surgical Procedure')], max_length=30)),
                ('description', models.TextField()),
                ('indications', models.TextField(help_text='Conditions this treatment addresses')),
                ('contraindications', models.TextField(help_text='When this treatment should not be used')),
                ('duration_minutes', models.PositiveIntegerField(help_text='Treatment duration in minutes')),
                ('sessions_required', models.PositiveIntegerField(help_text='Number of sessions typically required')),
                ('interval_between_sessions', models.PositiveIntegerField(help_text='Days between sessions')),
                ('downtime_days', models.PositiveIntegerField(help_text='Expected downtime in days')),
                ('recovery_instructions', models.TextField()),
                ('follow_up_schedule', models.TextField()),
                ('success_rate', models.DecimalField(decimal_places=2, help_text='Success rate percentage', max_digits=5)),
                ('side_effects', models.TextField(help_text='Potential side effects and risks')),
                ('price_per_session', models.DecimalField(decimal_places=2, max_digits=10)),
                ('package_pricing', models.JSONField(blank=True, default=dict)),
                ('ai_suitability_criteria', models.JSONField(blank=True, default=dict)),
                ('ai_outcome_predictors', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CosmeticGynecologyTreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('approved', 'Approved'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('modified', 'Modified'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('start_date', models.DateField()),
                ('estimated_completion', models.DateField()),
                ('total_sessions', models.PositiveIntegerField()),
                ('session_interval_days', models.PositiveIntegerField()),
                ('ai_plan_optimization', models.JSONField(blank=True, default=dict)),
                ('ai_success_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ai_risk_mitigation', models.JSONField(blank=True, default=dict)),
                ('ai_personalization_factors', models.JSONField(blank=True, default=dict)),
                ('total_estimated_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_plan', models.JSONField(blank=True, default=dict)),
                ('insurance_coverage', models.TextField(blank=True)),
                ('progress_milestones', models.JSONField(blank=True, default=list)),
                ('modification_history', models.JSONField(blank=True, default=list)),
                ('informed_consent', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('treatment_agreement', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmeticgynecologyclient')),
                ('consultation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmeticgynecologyconsultation')),
                ('primary_treatments', models.ManyToManyField(related_name='primary_plans', to='cosmetology.cosmeticgynecologytreatment')),
                ('supporting_treatments', models.ManyToManyField(blank=True, related_name='supporting_plans', to='cosmetology.cosmeticgynecologytreatment')),
            ],
        ),
        migrations.CreateModel(
            name='CosmeticGynecologyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_number', models.PositiveIntegerField()),
                ('session_date', models.DateTimeField()),
                ('session_notes', models.TextField()),
                ('client_comfort_level', models.IntegerField(help_text='Client comfort during session (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('before_photos', models.JSONField(blank=True, default=list, help_text='Before session photo URLs')),
                ('after_photos', models.JSONField(blank=True, default=list, help_text='After session photo URLs')),
                ('ai_progress_analysis', models.JSONField(blank=True, default=dict)),
                ('ai_improvement_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ai_next_session_recommendations', models.JSONField(blank=True, default=dict)),
                ('ai_treatment_adjustments', models.JSONField(blank=True, default=dict)),
                ('client_satisfaction', models.IntegerField(help_text='Client satisfaction with session (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('client_feedback', models.TextField(blank=True)),
                ('side_effects_reported', models.TextField(blank=True)),
                ('healing_progress', models.IntegerField(help_text='Healing progress assessment (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('recovery_notes', models.TextField(blank=True)),
                ('next_session_date', models.DateTimeField(blank=True, null=True)),
                ('homecare_instructions', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('treatment_performed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmeticgynecologytreatment')),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmeticgynecologytreatmentplan')),
            ],
            options={
                'ordering': ['session_number'],
            },
        ),
        migrations.AddField(
            model_name='cosmeticgynecologyconsultation',
            name='recommended_treatment_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cosmetology.cosmeticgynecologytreatmentplan'),
        ),
    ]
