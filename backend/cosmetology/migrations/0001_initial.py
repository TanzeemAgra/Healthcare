# Generated by Django 4.2.7 on 2025-08-19 06:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CosmetologyClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('skin_type', models.CharField(choices=[('oily', 'Oily'), ('dry', 'Dry'), ('combination', 'Combination'), ('sensitive', 'Sensitive'), ('normal', 'Normal'), ('acne_prone', 'Acne Prone'), ('mature', 'Mature')], max_length=20)),
                ('hair_type', models.CharField(choices=[('straight', 'Straight'), ('wavy', 'Wavy'), ('curly', 'Curly'), ('coily', 'Coily'), ('fine', 'Fine'), ('thick', 'Thick'), ('damaged', 'Damaged'), ('color_treated', 'Color Treated')], max_length=20)),
                ('allergies', models.TextField(blank=True, help_text='Known allergies to products or ingredients')),
                ('skin_concerns', models.JSONField(default=list, help_text='List of skin concerns')),
                ('hair_concerns', models.JSONField(default=list, help_text='List of hair concerns')),
                ('preferred_brands', models.JSONField(default=list, help_text='Preferred cosmetic brands')),
                ('budget_range', models.CharField(blank=True, max_length=50)),
                ('lifestyle_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CosmetologyProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('brand', models.CharField(max_length=100)),
                ('product_type', models.CharField(choices=[('skincare', 'Skincare'), ('makeup', 'Makeup'), ('haircare', 'Hair Care'), ('nailcare', 'Nail Care'), ('tools', 'Tools & Equipment'), ('supplements', 'Beauty Supplements'), ('professional', 'Professional Use Only')], max_length=20)),
                ('description', models.TextField()),
                ('ingredients', models.JSONField(default=list, help_text='List of key ingredients')),
                ('benefits', models.JSONField(default=list, help_text='Product benefits')),
                ('skin_types', models.JSONField(default=list, help_text='Suitable skin types')),
                ('usage_instructions', models.TextField(blank=True)),
                ('stock_quantity', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('batch_number', models.CharField(blank=True, max_length=50)),
                ('safety_warnings', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['brand', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CosmetologyService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('facial', 'Facial Treatments'), ('hair', 'Hair Services'), ('nails', 'Nail Services'), ('makeup', 'Makeup Services'), ('body', 'Body Treatments'), ('laser', 'Laser Treatments'), ('injectable', 'Injectable Treatments'), ('skincare', 'Advanced Skincare'), ('permanent', 'Permanent Makeup'), ('wellness', 'Wellness & Spa')], max_length=20)),
                ('description', models.TextField()),
                ('duration', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('requirements', models.JSONField(default=list, help_text='Pre-service requirements')),
                ('contraindications', models.JSONField(default=list, help_text='Contraindications')),
                ('aftercare_instructions', models.TextField(blank=True)),
                ('requires_consultation', models.BooleanField(default=False)),
                ('session_gap_days', models.PositiveIntegerField(default=0, help_text='Minimum days between sessions')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CosmetologyTreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Treatment plan name', max_length=200)),
                ('description', models.TextField()),
                ('beauty_goals', models.JSONField(default=list, help_text="Client's beauty goals")),
                ('target_concerns', models.JSONField(default=list, help_text='Specific concerns to address')),
                ('duration_weeks', models.PositiveIntegerField(help_text='Expected duration in weeks')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('progress_notes', models.TextField(blank=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='cosmetology.cosmetologyclient')),
                ('cosmetologist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlanService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(help_text="e.g., 'Weekly', 'Every 2 weeks'", max_length=100)),
                ('sessions_count', models.PositiveIntegerField(help_text='Total number of sessions')),
                ('sessions_completed', models.PositiveIntegerField(default=0)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in treatment sequence')),
                ('notes', models.TextField(blank=True)),
                ('is_optional', models.BooleanField(default=False)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologyservice')),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologytreatmentplan')),
            ],
            options={
                'ordering': ['order', 'service__name'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlanProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_frequency', models.CharField(help_text="e.g., 'Daily', 'Twice a week'", max_length=100)),
                ('quantity_needed', models.PositiveIntegerField(help_text='Quantity for full treatment')),
                ('priority', models.CharField(choices=[('essential', 'Essential'), ('recommended', 'Recommended'), ('optional', 'Optional')], default='recommended', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologyproduct')),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologytreatmentplan')),
            ],
            options={
                'ordering': ['priority', 'product__name'],
            },
        ),
        migrations.AddField(
            model_name='cosmetologytreatmentplan',
            name='recommended_products',
            field=models.ManyToManyField(through='cosmetology.TreatmentPlanProduct', to='cosmetology.cosmetologyproduct'),
        ),
        migrations.AddField(
            model_name='cosmetologytreatmentplan',
            name='recommended_services',
            field=models.ManyToManyField(through='cosmetology.TreatmentPlanService', to='cosmetology.cosmetologyservice'),
        ),
        migrations.CreateModel(
            name='CosmetologyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField()),
                ('progress_photos', models.JSONField(default=list, help_text='Progress photo references')),
                ('measurements', models.JSONField(default=dict, help_text='Skin measurements, etc.')),
                ('improvements_noted', models.TextField()),
                ('concerns_remaining', models.TextField(blank=True)),
                ('client_satisfaction', models.IntegerField(help_text='Client satisfaction rating 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('client_feedback', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('plan_adjustments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to='cosmetology.cosmetologyclient')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('treatment_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologytreatmentplan')),
            ],
            options={
                'ordering': ['-date_recorded'],
            },
        ),
        migrations.CreateModel(
            name='CosmetologyConsultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consultation_date', models.DateTimeField()),
                ('skin_analysis', models.JSONField(default=dict, help_text='Detailed skin analysis results')),
                ('skin_photos', models.JSONField(default=list, help_text='Photo references')),
                ('hair_analysis', models.JSONField(default=dict, help_text='Hair condition analysis')),
                ('scalp_condition', models.TextField(blank=True)),
                ('primary_concerns', models.TextField()),
                ('beauty_goals', models.TextField()),
                ('lifestyle_factors', models.TextField(blank=True)),
                ('immediate_recommendations', models.TextField()),
                ('long_term_plan', models.TextField(blank=True)),
                ('product_recommendations', models.TextField(blank=True)),
                ('next_consultation_date', models.DateField(blank=True, null=True)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='cosmetology.cosmetologyclient')),
                ('cosmetologist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-consultation_date'],
            },
        ),
        migrations.CreateModel(
            name='CosmetologyAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('consultation_notes', models.TextField(blank=True, help_text='Pre-service consultation notes')),
                ('service_notes', models.TextField(blank=True, help_text='Notes during service')),
                ('aftercare_given', models.BooleanField(default=False)),
                ('service_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('additional_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('next_appointment_due', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='cosmetology.cosmetologyclient')),
                ('cosmetologist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cosmetology_appointments', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cosmetology.cosmetologyservice')),
            ],
            options={
                'ordering': ['-appointment_date'],
            },
        ),
    ]
