# Generated by Django 4.2.7 on 2025-08-06 05:33

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('medicine', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiabetesPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diabetes_type', models.CharField(choices=[('type1', 'Type 1 Diabetes'), ('type2', 'Type 2 Diabetes'), ('gestational', 'Gestational Diabetes'), ('prediabetes', 'Pre-diabetes'), ('mody', 'MODY (Maturity-Onset Diabetes of the Young)'), ('secondary', 'Secondary Diabetes')], max_length=20)),
                ('diagnosis_date', models.DateField()),
                ('hba1c_target', models.FloatField(default=7.0, validators=[django.core.validators.MinValueValidator(4.0), django.core.validators.MaxValueValidator(15.0)])),
                ('current_hba1c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(4.0), django.core.validators.MaxValueValidator(15.0)])),
                ('insulin_regimen', models.CharField(choices=[('basal_bolus', 'Basal-Bolus'), ('split_mixed', 'Split Mixed'), ('pump', 'Insulin Pump'), ('none', 'No Insulin')], default='none', max_length=20)),
                ('total_daily_dose', models.FloatField(blank=True, help_text='Total daily insulin dose in units', null=True)),
                ('carb_ratio', models.FloatField(blank=True, help_text='Insulin to carb ratio (1 unit per X grams)', null=True)),
                ('correction_factor', models.FloatField(blank=True, help_text='Correction factor (1 unit drops BG by X mg/dL)', null=True)),
                ('monitoring_method', models.CharField(choices=[('bgm', 'Blood Glucose Meter'), ('cgm', 'Continuous Glucose Monitor'), ('flash', 'Flash Glucose Monitor'), ('hybrid', 'Hybrid Monitoring')], default='bgm', max_length=20)),
                ('target_glucose_min', models.IntegerField(default=80, help_text='Target glucose minimum (mg/dL)')),
                ('target_glucose_max', models.IntegerField(default=130, help_text='Target glucose maximum (mg/dL)')),
                ('has_retinopathy', models.BooleanField(default=False)),
                ('has_nephropathy', models.BooleanField(default=False)),
                ('has_neuropathy', models.BooleanField(default=False)),
                ('has_cardiovascular_disease', models.BooleanField(default=False)),
                ('exercise_frequency', models.IntegerField(default=0, help_text='Exercise sessions per week')),
                ('smoking_status', models.CharField(choices=[('never', 'Never'), ('former', 'Former'), ('current', 'Current')], default='never', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='diabetes_profile', to='medicine.patient')),
            ],
            options={
                'db_table': 'diabetes_patients',
            },
        ),
        migrations.CreateModel(
            name='HbA1cRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_date', models.DateField()),
                ('hba1c_value', models.FloatField(validators=[django.core.validators.MinValueValidator(4.0), django.core.validators.MaxValueValidator(15.0)])),
                ('lab_name', models.CharField(blank=True, max_length=100)),
                ('is_at_target', models.BooleanField(default=False)),
                ('change_from_previous', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hba1c_records', to='medicine.diabetespatient')),
                ('ordered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
            ],
            options={
                'db_table': 'hba1c_records',
                'ordering': ['-test_date'],
            },
        ),
        migrations.CreateModel(
            name='DiabetesMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_name', models.CharField(max_length=100)),
                ('medication_type', models.CharField(choices=[('insulin_rapid', 'Rapid-acting Insulin'), ('insulin_short', 'Short-acting Insulin'), ('insulin_intermediate', 'Intermediate-acting Insulin'), ('insulin_long', 'Long-acting Insulin'), ('insulin_ultra_long', 'Ultra-long-acting Insulin'), ('metformin', 'Metformin'), ('sulfonylurea', 'Sulfonylurea'), ('dpp4_inhibitor', 'DPP-4 Inhibitor'), ('glp1_agonist', 'GLP-1 Agonist'), ('sglt2_inhibitor', 'SGLT-2 Inhibitor'), ('thiazolidinedione', 'Thiazolidinedione'), ('alpha_glucosidase', 'Alpha-glucosidase Inhibitor'), ('other', 'Other')], max_length=30)),
                ('dosage', models.CharField(max_length=50)),
                ('frequency', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='medicine.diabetespatient')),
                ('prescribed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
            ],
            options={
                'db_table': 'diabetes_medications',
            },
        ),
        migrations.CreateModel(
            name='DiabetesGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_type', models.CharField(choices=[('hba1c', 'HbA1c Target'), ('weight', 'Weight Management'), ('exercise', 'Exercise Goal'), ('glucose', 'Glucose Control'), ('medication', 'Medication Adherence'), ('education', 'Education Completion'), ('screening', 'Screening Schedule'), ('lifestyle', 'Lifestyle Change'), ('other', 'Other Goal')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_value', models.FloatField(blank=True, null=True)),
                ('current_value', models.FloatField(blank=True, null=True)),
                ('target_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('achieved', 'Achieved'), ('modified', 'Modified'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='medicine.diabetespatient')),
                ('set_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
            ],
            options={
                'db_table': 'diabetes_goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiabetesEmergencyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('hypoglycemia', 'Severe Hypoglycemia'), ('dka', 'Diabetic Ketoacidosis'), ('hhs', 'Hyperosmolar Hyperglycemic State'), ('hyperglycemia', 'Severe Hyperglycemia'), ('other', 'Other Emergency')], max_length=20)),
                ('event_datetime', models.DateTimeField()),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('critical', 'Critical')], max_length=20)),
                ('glucose_level', models.IntegerField(blank=True, null=True)),
                ('ketones', models.CharField(blank=True, max_length=20)),
                ('symptoms', models.TextField()),
                ('treatment_given', models.TextField()),
                ('hospital_admission', models.BooleanField(default=False)),
                ('hospital_name', models.CharField(blank=True, max_length=100)),
                ('resolution_datetime', models.DateTimeField(blank=True, null=True)),
                ('outcome', models.TextField(blank=True)),
                ('contributing_factors', models.TextField(blank=True)),
                ('prevention_plan', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_events', to='medicine.diabetespatient')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'diabetes_emergency_events',
                'ordering': ['-event_datetime'],
            },
        ),
        migrations.CreateModel(
            name='DiabetesEducationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_type', models.CharField(choices=[('initial', 'Initial Diabetes Education'), ('insulin_training', 'Insulin Injection Training'), ('bgm_training', 'Blood Glucose Monitoring Training'), ('carb_counting', 'Carbohydrate Counting'), ('exercise', 'Exercise and Diabetes'), ('sick_day', 'Sick Day Management'), ('hypoglycemia', 'Hypoglycemia Management'), ('foot_care', 'Foot Care'), ('travel', 'Travel with Diabetes'), ('technology', 'Diabetes Technology'), ('nutrition', 'Nutrition Counseling'), ('other', 'Other')], max_length=20)),
                ('session_date', models.DateField()),
                ('duration_minutes', models.IntegerField(default=60)),
                ('topics_covered', models.TextField()),
                ('patient_understanding_level', models.IntegerField(help_text='1=Poor, 5=Excellent', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('materials_provided', models.TextField(blank=True)),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('next_session_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_sessions', to='medicine.diabetespatient')),
                ('educator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
            ],
            options={
                'db_table': 'diabetes_education_sessions',
                'ordering': ['-session_date'],
            },
        ),
        migrations.CreateModel(
            name='DiabetesComplicationScreening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screening_type', models.CharField(choices=[('retinopathy', 'Diabetic Retinopathy'), ('nephropathy', 'Diabetic Nephropathy'), ('neuropathy', 'Diabetic Neuropathy'), ('foot', 'Diabetic Foot'), ('cardiovascular', 'Cardiovascular'), ('dental', 'Dental')], max_length=20)),
                ('screening_date', models.DateField()),
                ('result', models.CharField(choices=[('normal', 'Normal'), ('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('proliferative', 'Proliferative')], max_length=20)),
                ('blood_pressure_systolic', models.IntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.IntegerField(blank=True, null=True)),
                ('microalbumin', models.FloatField(blank=True, null=True)),
                ('egfr', models.FloatField(blank=True, null=True)),
                ('next_screening_date', models.DateField(blank=True, null=True)),
                ('findings', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenings', to='medicine.diabetespatient')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
            ],
            options={
                'db_table': 'diabetes_complication_screenings',
                'ordering': ['-screening_date'],
            },
        ),
        migrations.CreateModel(
            name='BloodGlucoseReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reading_type', models.CharField(choices=[('fasting', 'Fasting'), ('pre_meal', 'Pre-meal'), ('post_meal', 'Post-meal'), ('bedtime', 'Bedtime'), ('random', 'Random'), ('exercise', 'Exercise'), ('sick', 'Sick Day')], max_length=20)),
                ('glucose_value', models.IntegerField(validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(600)])),
                ('reading_datetime', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('meal_carbs', models.IntegerField(blank=True, help_text='Carbohydrates consumed (grams)', null=True)),
                ('insulin_taken', models.FloatField(blank=True, help_text='Insulin units taken', null=True)),
                ('exercise_minutes', models.IntegerField(blank=True, help_text='Exercise duration (minutes)', null=True)),
                ('is_hypoglycemic', models.BooleanField(default=False)),
                ('is_hyperglycemic', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diabetes_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='glucose_readings', to='medicine.diabetespatient')),
            ],
            options={
                'db_table': 'blood_glucose_readings',
                'ordering': ['-reading_datetime'],
            },
        ),
    ]
