# Generated by Django 5.2.4 on 2025-08-05 04:19

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackOfficeAutomation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('automation_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('task_name', models.CharField(max_length=200)),
                ('task_type', models.CharField(choices=[('billing_processing', 'Billing Processing'), ('insurance_claims', 'Insurance Claims Processing'), ('appointment_reminders', 'Appointment Reminders'), ('lab_result_distribution', 'Lab Result Distribution'), ('prescription_renewals', 'Prescription Renewals'), ('patient_follow_up', 'Patient Follow-up'), ('inventory_management', 'Inventory Management'), ('compliance_reporting', 'Compliance Reporting'), ('quality_metrics', 'Quality Metrics Collection'), ('revenue_cycle', 'Revenue Cycle Management')], default='billing_processing', max_length=25)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('once', 'One-time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('custom', 'Custom Schedule')], default='daily', max_length=15)),
                ('schedule_time', models.TimeField(blank=True, null=True)),
                ('custom_schedule', models.CharField(blank=True, help_text='Cron expression for custom scheduling', max_length=100)),
                ('task_parameters', models.JSONField(default=dict, help_text='Task-specific configuration parameters')),
                ('notification_settings', models.JSONField(default=dict)),
                ('error_handling_config', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='scheduled', max_length=15)),
                ('is_active', models.BooleanField(default=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('success_count', models.PositiveIntegerField(default=0)),
                ('failure_count', models.PositiveIntegerField(default=0)),
                ('execution_log', models.JSONField(default=list, help_text='Recent execution history')),
                ('last_execution_summary', models.TextField(blank=True)),
                ('average_execution_time', models.DurationField(blank=True, null=True)),
                ('ai_optimization_suggestions', models.TextField(blank=True)),
                ('ai_performance_analysis', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_automations', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_back_office_automation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContractRedlining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('title', models.CharField(max_length=300)),
                ('contract_type', models.CharField(choices=[('employment', 'Employment Contract'), ('vendor', 'Vendor Agreement'), ('insurance', 'Insurance Contract'), ('partnership', 'Partnership Agreement'), ('equipment_lease', 'Equipment Lease'), ('service_agreement', 'Service Agreement'), ('consulting', 'Consulting Agreement'), ('research', 'Research Agreement')], default='service_agreement', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('redlined', 'Redlined'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('executed', 'Executed')], default='draft', max_length=15)),
                ('counterparty_name', models.CharField(max_length=200)),
                ('contract_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('original_document', models.FileField(upload_to='contracts/original/')),
                ('redlined_document', models.FileField(blank=True, null=True, upload_to='contracts/redlined/')),
                ('final_document', models.FileField(blank=True, null=True, upload_to='contracts/final/')),
                ('review_notes', models.TextField(blank=True)),
                ('redline_comments', models.JSONField(default=list, help_text='List of redline comments')),
                ('risk_assessment', models.TextField(blank=True)),
                ('key_terms_summary', models.TextField(blank=True)),
                ('ai_risk_analysis', models.TextField(blank=True)),
                ('ai_suggested_changes', models.TextField(blank=True)),
                ('ai_compliance_check', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_contracts', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_contracts', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_contracts', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_contracts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_contract_redlining',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('specialization', models.CharField(choices=[('general', 'General Medicine'), ('emergency', 'Emergency Medicine'), ('internal', 'Internal Medicine'), ('family', 'Family Medicine'), ('cardiology', 'Cardiology'), ('pulmonology', 'Pulmonology'), ('gastroenterology', 'Gastroenterology'), ('nephrology', 'Nephrology'), ('endocrinology', 'Endocrinology'), ('rheumatology', 'Rheumatology'), ('hematology', 'Hematology'), ('oncology', 'Oncology'), ('neurology', 'Neurology'), ('psychiatry', 'Psychiatry'), ('geriatrics', 'Geriatrics'), ('intensive_care', 'Intensive Care Medicine')], default='general', max_length=20)),
                ('qualification', models.CharField(choices=[('MBBS', 'MBBS'), ('MD', 'MD'), ('DO', 'DO'), ('DNB', 'DNB'), ('DM', 'DM'), ('MCh', 'MCh'), ('FRCP', 'FRCP'), ('FACS', 'FACS')], default='MBBS', max_length=10)),
                ('years_experience', models.PositiveIntegerField(default=0)),
                ('education', models.TextField()),
                ('certifications', models.TextField(blank=True)),
                ('hospital_affiliation', models.CharField(blank=True, max_length=200)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('available_hours', models.JSONField(default=dict, help_text='Availability schedule')),
                ('is_available_emergency', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='doctor_profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_doctors',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('appointment_type', models.CharField(choices=[('consultation', 'General Consultation'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency'), ('routine_checkup', 'Routine Checkup'), ('preventive_care', 'Preventive Care'), ('chronic_care', 'Chronic Care Management'), ('second_opinion', 'Second Opinion'), ('telemedicine', 'Telemedicine')], default='consultation', max_length=20)),
                ('scheduled_datetime', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', max_length=10)),
                ('chief_complaint', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('symptoms', models.TextField(blank=True)),
                ('examination_findings', models.TextField(blank=True)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment_plan', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('prescription_given', models.BooleanField(default=False)),
                ('lab_tests_ordered', models.BooleanField(default=False)),
                ('referral_given', models.BooleanField(default=False)),
                ('is_emergency', models.BooleanField(default=False)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='medicine.doctor')),
            ],
            options={
                'db_table': 'medicine_appointments',
                'ordering': ['-scheduled_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('arrival_datetime', models.DateTimeField(auto_now_add=True)),
                ('arrival_mode', models.CharField(choices=[('ambulance', 'Ambulance'), ('walk_in', 'Walk-in'), ('private_vehicle', 'Private Vehicle'), ('helicopter', 'Helicopter'), ('police', 'Police Transport'), ('transfer', 'Hospital Transfer')], default='walk_in', max_length=20)),
                ('triage_level', models.CharField(choices=[('1', 'Level 1 - Immediate (Life-threatening)'), ('2', 'Level 2 - Emergent (High risk)'), ('3', 'Level 3 - Urgent (Moderate risk)'), ('4', 'Level 4 - Less Urgent (Low risk)'), ('5', 'Level 5 - Non-urgent (No risk)')], default='3', max_length=1)),
                ('chief_complaint', models.TextField()),
                ('history_present_illness', models.TextField()),
                ('vital_signs_on_arrival', models.JSONField(default=dict)),
                ('physical_examination', models.TextField()),
                ('pain_assessment', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('primary_diagnosis', models.TextField()),
                ('secondary_diagnoses', models.TextField(blank=True)),
                ('procedures_performed', models.TextField(blank=True)),
                ('medications_given', models.TextField(blank=True)),
                ('imaging_ordered', models.TextField(blank=True)),
                ('lab_work_ordered', models.TextField(blank=True)),
                ('consultations_requested', models.TextField(blank=True)),
                ('treatment_summary', models.TextField()),
                ('disposition', models.CharField(choices=[('admitted', 'Admitted to Hospital'), ('discharged', 'Discharged Home'), ('transferred', 'Transferred to Another Facility'), ('observation', 'Under Observation'), ('ama', 'Against Medical Advice'), ('deceased', 'Deceased'), ('eloped', 'Left Without Being Seen')], default='discharged', max_length=15)),
                ('discharge_instructions', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('time_to_provider', models.DurationField(blank=True, help_text='Time from arrival to seeing provider', null=True)),
                ('total_ed_time', models.DurationField(blank=True, help_text='Total time in emergency department', null=True)),
                ('is_trauma', models.BooleanField(default=False)),
                ('is_critical', models.BooleanField(default=False)),
                ('requires_admission', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attending_physician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_cases', to='medicine.doctor')),
                ('triage_nurse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triaged_cases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_emergency_cases',
                'ordering': ['-arrival_datetime'],
            },
        ),
        migrations.CreateModel(
            name='MedicalResearchReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('authors', models.TextField()),
                ('journal', models.CharField(max_length=300)),
                ('publication_date', models.DateField()),
                ('doi', models.CharField(blank=True, max_length=200)),
                ('pmid', models.CharField(blank=True, max_length=50)),
                ('research_type', models.CharField(choices=[('clinical_trial', 'Clinical Trial'), ('systematic_review', 'Systematic Review'), ('meta_analysis', 'Meta-Analysis'), ('case_study', 'Case Study'), ('cohort_study', 'Cohort Study'), ('randomized_trial', 'Randomized Controlled Trial'), ('observational', 'Observational Study'), ('literature_review', 'Literature Review')], default='clinical_trial', max_length=20)),
                ('research_question', models.TextField()),
                ('methodology', models.TextField()),
                ('sample_size', models.PositiveIntegerField(blank=True, null=True)),
                ('study_duration', models.CharField(blank=True, max_length=100)),
                ('abstract', models.TextField()),
                ('key_findings', models.TextField()),
                ('conclusions', models.TextField()),
                ('limitations', models.TextField(blank=True)),
                ('ai_summary', models.TextField(blank=True)),
                ('ai_critical_analysis', models.TextField(blank=True)),
                ('ai_clinical_relevance', models.TextField(blank=True)),
                ('ai_methodology_assessment', models.TextField(blank=True)),
                ('ai_bias_assessment', models.TextField(blank=True)),
                ('evidence_level', models.CharField(blank=True, choices=[('level_1', 'Level 1 - Systematic Review/Meta-analysis'), ('level_2', 'Level 2 - Randomized Controlled Trial'), ('level_3', 'Level 3 - Controlled Trial (non-randomized)'), ('level_4', 'Level 4 - Case-control/Cohort Study'), ('level_5', 'Level 5 - Case Series/Case Report'), ('level_6', 'Level 6 - Expert Opinion')], max_length=10)),
                ('quality_rating', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('very_poor', 'Very Poor')], max_length=15)),
                ('risk_of_bias', models.TextField(blank=True)),
                ('statistical_significance', models.BooleanField(blank=True, null=True)),
                ('clinical_significance', models.TextField(blank=True)),
                ('medical_specialty', models.CharField(max_length=100)),
                ('keywords', models.JSONField(default=list)),
                ('mesh_terms', models.JSONField(default=list)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('is_recommended', models.BooleanField(default=False)),
                ('recommendation_notes', models.TextField(blank=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('citations_count', models.PositiveIntegerField(default=0)),
                ('bookmarks_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_medical_research_review',
                'ordering': ['-publication_date'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.CharField(max_length=20, unique=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3)),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('emergency_contact', models.CharField(max_length=100)),
                ('emergency_phone', models.CharField(max_length=15)),
                ('medical_history', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('current_medications', models.TextField(blank=True)),
                ('family_history', models.TextField(blank=True)),
                ('social_history', models.TextField(blank=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_number', models.CharField(blank=True, max_length=50)),
                ('weight', models.FloatField(blank=True, help_text='Weight in kg', null=True)),
                ('height', models.FloatField(blank=True, help_text='Height in cm', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medicine_patient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_patients',
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('record_type', models.CharField(choices=[('consultation', 'Consultation Note'), ('progress', 'Progress Note'), ('discharge', 'Discharge Summary'), ('procedure', 'Procedure Note'), ('operation', 'Operation Note'), ('emergency', 'Emergency Note'), ('transfer', 'Transfer Note')], default='consultation', max_length=15)),
                ('subject', models.CharField(max_length=200)),
                ('subjective', models.TextField(help_text="Patient's symptoms and history")),
                ('objective', models.TextField(help_text='Physical examination findings')),
                ('assessment', models.TextField(help_text='Diagnosis and clinical impression')),
                ('plan', models.TextField(help_text='Treatment plan and recommendations')),
                ('vital_signs', models.JSONField(blank=True, null=True)),
                ('medications_prescribed', models.TextField(blank=True)),
                ('procedures_performed', models.TextField(blank=True)),
                ('lab_results', models.TextField(blank=True)),
                ('imaging_results', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('provider_signature', models.CharField(max_length=100)),
                ('is_dictated', models.BooleanField(default=False)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('attachments', models.JSONField(default=list, help_text='List of attached files')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='medicine.appointment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_medical_records', to='medicine.doctor')),
                ('emergency_case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='medicine.emergencycase')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_records', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_medical_records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('test_name', models.CharField(max_length=200)),
                ('test_category', models.CharField(choices=[('blood', 'Blood Test'), ('urine', 'Urine Test'), ('stool', 'Stool Test'), ('microbiology', 'Microbiology'), ('biochemistry', 'Biochemistry'), ('hematology', 'Hematology'), ('immunology', 'Immunology'), ('molecular', 'Molecular Biology'), ('genetic', 'Genetic Testing'), ('toxicology', 'Toxicology')], default='blood', max_length=15)),
                ('test_code', models.CharField(blank=True, max_length=20)),
                ('instructions', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('ordered', 'Ordered'), ('sample_collected', 'Sample Collected'), ('processing', 'Processing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='ordered', max_length=20)),
                ('ordered_date', models.DateTimeField(auto_now_add=True)),
                ('sample_collected_date', models.DateTimeField(blank=True, null=True)),
                ('result_date', models.DateTimeField(blank=True, null=True)),
                ('results', models.JSONField(blank=True, help_text='Test results in JSON format', null=True)),
                ('result_interpretation', models.TextField(blank=True)),
                ('reference_range', models.TextField(blank=True)),
                ('is_abnormal', models.BooleanField(default=False)),
                ('is_critical', models.BooleanField(default=False)),
                ('lab_comments', models.TextField(blank=True)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='lab_reports/')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='medicine.appointment')),
                ('ordered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_tests', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_lab_tests',
                'ordering': ['-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='InsurancePolicyCopilot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('insurance_provider', models.CharField(max_length=200)),
                ('policy_number', models.CharField(max_length=100)),
                ('policy_type', models.CharField(choices=[('health_insurance', 'Health Insurance'), ('dental_insurance', 'Dental Insurance'), ('vision_insurance', 'Vision Insurance'), ('disability_insurance', 'Disability Insurance'), ('life_insurance', 'Life Insurance'), ('workers_comp', 'Workers Compensation'), ('malpractice', 'Malpractice Insurance')], default='health_insurance', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending', 'Pending'), ('expired', 'Expired'), ('cancelled', 'Cancelled'), ('suspended', 'Suspended')], default='active', max_length=15)),
                ('coverage_start_date', models.DateField()),
                ('coverage_end_date', models.DateField()),
                ('premium_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('deductible_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('copay_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('coinsurance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('out_of_pocket_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('covered_services', models.JSONField(default=list)),
                ('excluded_services', models.JSONField(default=list)),
                ('prior_authorization_required', models.JSONField(default=list)),
                ('network_providers', models.JSONField(default=list)),
                ('ai_coverage_summary', models.TextField(blank=True)),
                ('ai_cost_estimation', models.TextField(blank=True)),
                ('ai_recommendations', models.TextField(blank=True)),
                ('ai_risk_assessment', models.TextField(blank=True)),
                ('claims_ytd', models.PositiveIntegerField(default=0)),
                ('claims_paid_ytd', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('remaining_deductible', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_policies', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_insurance_policy_copilot',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HospitalCSRAssistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('inquiry_type', models.CharField(choices=[('appointment_scheduling', 'Appointment Scheduling'), ('billing_inquiry', 'Billing Inquiry'), ('insurance_verification', 'Insurance Verification'), ('medical_records', 'Medical Records Request'), ('general_information', 'General Information'), ('complaint_resolution', 'Complaint Resolution'), ('prescription_refill', 'Prescription Refill'), ('test_results', 'Test Results Inquiry'), ('facility_directions', 'Facility Directions'), ('emergency_guidance', 'Emergency Guidance')], default='general_information', max_length=25)),
                ('subject', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', max_length=10)),
                ('resolution_status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('closed', 'Closed')], default='open', max_length=15)),
                ('caller_name', models.CharField(max_length=200)),
                ('caller_phone', models.CharField(max_length=20)),
                ('caller_email', models.EmailField(blank=True, max_length=254)),
                ('preferred_contact_method', models.CharField(blank=True, max_length=50)),
                ('conversation_transcript', models.JSONField(default=list)),
                ('ai_analysis', models.TextField(blank=True)),
                ('ai_suggested_responses', models.JSONField(default=list)),
                ('ai_resolution_recommendations', models.TextField(blank=True)),
                ('sentiment_analysis', models.CharField(blank=True, max_length=50)),
                ('resolution_summary', models.TextField(blank=True)),
                ('actions_taken', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateTimeField(blank=True, null=True)),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('resolution_time', models.DurationField(blank=True, null=True)),
                ('customer_satisfaction_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_csr_tickets', to=settings.AUTH_USER_MODEL)),
                ('escalated_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_csr_tickets', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='csr_tickets', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_hospital_csr_assistant',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='emergencycase',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_cases', to='medicine.patient'),
        ),
        migrations.CreateModel(
            name='ClinicalHistorySearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('search_type', models.CharField(choices=[('patient_history', 'Patient History Search'), ('diagnosis_lookup', 'Diagnosis Lookup'), ('medication_history', 'Medication History'), ('procedure_history', 'Procedure History'), ('lab_results_search', 'Lab Results Search'), ('imaging_search', 'Imaging Search'), ('symptom_search', 'Symptom-based Search'), ('clinical_notes', 'Clinical Notes Search')], default='patient_history', max_length=20)),
                ('search_query', models.TextField()),
                ('search_filters', models.JSONField(default=dict, help_text='Applied filters like date range, department, etc.')),
                ('date_range_start', models.DateField(blank=True, null=True)),
                ('date_range_end', models.DateField(blank=True, null=True)),
                ('departments_searched', models.JSONField(default=list)),
                ('record_types_searched', models.JSONField(default=list)),
                ('results_count', models.PositiveIntegerField(default=0)),
                ('search_results', models.JSONField(default=list, help_text='Search results with relevance scores')),
                ('relevant_records', models.JSONField(default=list, help_text='IDs of relevant medical records')),
                ('ai_query_understanding', models.TextField(blank=True)),
                ('ai_suggested_refinements', models.JSONField(default=list)),
                ('ai_related_searches', models.JSONField(default=list)),
                ('semantic_matches', models.JSONField(default=list)),
                ('search_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('relevance_score', models.FloatField(blank=True, null=True)),
                ('user_satisfaction', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('results_clicked', models.JSONField(default=list)),
                ('time_spent_on_results', models.DurationField(blank=True, null=True)),
                ('follow_up_searches', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('searched_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_searches', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_history', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_clinical_history_search',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='medicine.patient'),
        ),
        migrations.CreateModel(
            name='AIBookingAssistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('initiated', 'Initiated'), ('information_gathering', 'Gathering Information'), ('slot_selection', 'Slot Selection'), ('confirmation_pending', 'Confirmation Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled'), ('completed', 'Completed')], default='initiated', max_length=25)),
                ('communication_channel', models.CharField(choices=[('web_chat', 'Web Chat'), ('phone_call', 'Phone Call'), ('sms', 'SMS'), ('email', 'Email'), ('mobile_app', 'Mobile App'), ('voice_assistant', 'Voice Assistant')], default='web_chat', max_length=15)),
                ('session_start', models.DateTimeField(auto_now_add=True)),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('preferred_specialization', models.CharField(blank=True, max_length=50)),
                ('preferred_date_range_start', models.DateField(blank=True, null=True)),
                ('preferred_date_range_end', models.DateField(blank=True, null=True)),
                ('preferred_time_slots', models.JSONField(default=list)),
                ('urgency_level', models.CharField(blank=True, max_length=20)),
                ('conversation_log', models.JSONField(default=list, help_text='Chat history with AI assistant')),
                ('patient_requirements', models.TextField(blank=True)),
                ('symptoms_mentioned', models.TextField(blank=True)),
                ('insurance_verification', models.BooleanField(default=False)),
                ('intent_analysis', models.TextField(blank=True)),
                ('recommended_specialty', models.CharField(blank=True, max_length=100)),
                ('urgency_assessment', models.TextField(blank=True)),
                ('suggested_appointment_types', models.JSONField(default=list)),
                ('selected_slot', models.DateTimeField(blank=True, null=True)),
                ('booking_confirmation_code', models.CharField(blank=True, max_length=20)),
                ('reminder_preferences', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_booking_sessions', to='medicine.appointment')),
                ('preferred_doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_bookings', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_ai_booking_assistant',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatientReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('report_type', models.CharField(choices=[('medical_summary', 'Medical Summary Report'), ('discharge_summary', 'Discharge Summary'), ('lab_summary', 'Laboratory Summary'), ('imaging_summary', 'Imaging Summary'), ('medication_history', 'Medication History'), ('progress_report', 'Progress Report'), ('referral_report', 'Referral Report'), ('insurance_report', 'Insurance Report')], default='medical_summary', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_review', 'Pending Review'), ('approved', 'Approved'), ('sent', 'Sent'), ('archived', 'Archived')], default='draft', max_length=15)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('data_range_start', models.DateField(blank=True, null=True)),
                ('data_range_end', models.DateField(blank=True, null=True)),
                ('recipient_name', models.CharField(blank=True, max_length=200)),
                ('recipient_email', models.EmailField(blank=True, max_length=254)),
                ('recipient_organization', models.CharField(blank=True, max_length=200)),
                ('ai_generated_summary', models.TextField(blank=True)),
                ('attachments', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_reports', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_patient_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PhysicianAssistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('session_type', models.CharField(choices=[('diagnosis_support', 'Diagnosis Support'), ('treatment_planning', 'Treatment Planning'), ('drug_interaction', 'Drug Interaction Check'), ('clinical_guidelines', 'Clinical Guidelines'), ('differential_diagnosis', 'Differential Diagnosis'), ('risk_assessment', 'Risk Assessment'), ('symptom_analysis', 'Symptom Analysis'), ('case_consultation', 'Case Consultation')], default='diagnosis_support', max_length=25)),
                ('chief_complaint', models.TextField()),
                ('symptoms', models.TextField()),
                ('vital_signs', models.JSONField(default=dict)),
                ('lab_results', models.TextField(blank=True)),
                ('imaging_results', models.TextField(blank=True)),
                ('medical_history', models.TextField(blank=True)),
                ('current_medications', models.TextField(blank=True)),
                ('ai_analysis', models.TextField()),
                ('suggested_diagnoses', models.JSONField(default=list)),
                ('confidence_scores', models.JSONField(default=dict)),
                ('recommended_tests', models.TextField(blank=True)),
                ('treatment_suggestions', models.TextField(blank=True)),
                ('drug_interactions', models.TextField(blank=True)),
                ('risk_factors', models.TextField(blank=True)),
                ('red_flags', models.TextField(blank=True)),
                ('clinical_guidelines_referenced', models.TextField(blank=True)),
                ('evidence_level', models.CharField(blank=True, max_length=50)),
                ('follow_up_recommendations', models.TextField(blank=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_consultations', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_consultations', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_physician_assistant',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('medication_name', models.CharField(max_length=200)),
                ('medication_type', models.CharField(choices=[('tablet', 'Tablet'), ('capsule', 'Capsule'), ('syrup', 'Syrup'), ('injection', 'Injection'), ('cream', 'Cream'), ('ointment', 'Ointment'), ('drops', 'Drops'), ('inhaler', 'Inhaler'), ('suppository', 'Suppository'), ('patch', 'Patch')], default='tablet', max_length=15)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(choices=[('once_daily', 'Once Daily'), ('twice_daily', 'Twice Daily'), ('three_times', 'Three Times Daily'), ('four_times', 'Four Times Daily'), ('as_needed', 'As Needed'), ('before_meals', 'Before Meals'), ('after_meals', 'After Meals'), ('at_bedtime', 'At Bedtime'), ('every_other_day', 'Every Other Day'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='twice_daily', max_length=20)),
                ('duration_days', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField()),
                ('instructions', models.TextField()),
                ('warnings', models.TextField(blank=True)),
                ('side_effects', models.TextField(blank=True)),
                ('is_generic_allowed', models.BooleanField(default=True)),
                ('refills_allowed', models.PositiveIntegerField(default=0)),
                ('dispensed', models.BooleanField(default=False)),
                ('dispensed_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medicine.appointment')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_prescriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProtocolSummarizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('title', models.CharField(max_length=300)),
                ('protocol_type', models.CharField(choices=[('treatment', 'Treatment Protocol'), ('diagnostic', 'Diagnostic Protocol'), ('emergency', 'Emergency Protocol'), ('surgical', 'Surgical Protocol'), ('medication', 'Medication Protocol'), ('infection_control', 'Infection Control'), ('safety', 'Safety Protocol'), ('clinical_guideline', 'Clinical Guideline')], default='treatment', max_length=20)),
                ('medical_condition', models.CharField(max_length=200)),
                ('specialty', models.CharField(max_length=100)),
                ('original_document', models.FileField(blank=True, null=True, upload_to='protocols/')),
                ('source_organization', models.CharField(max_length=200)),
                ('version', models.CharField(max_length=50)),
                ('effective_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('executive_summary', models.TextField()),
                ('key_recommendations', models.TextField()),
                ('contraindications', models.TextField(blank=True)),
                ('warnings_precautions', models.TextField(blank=True)),
                ('step_by_step_procedure', models.TextField()),
                ('monitoring_requirements', models.TextField(blank=True)),
                ('expected_outcomes', models.TextField(blank=True)),
                ('complications_management', models.TextField(blank=True)),
                ('ai_summary', models.TextField(blank=True)),
                ('ai_key_points', models.TextField(blank=True)),
                ('ai_risk_factors', models.TextField(blank=True)),
                ('tags', models.JSONField(default=list, help_text='Search tags')),
                ('is_active', models.BooleanField(default=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('downloads_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_protocol_summarizer',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SOAPNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('subjective', models.TextField(help_text="Patient's symptoms, concerns, and history")),
                ('objective', models.TextField(help_text='Observable findings, vital signs, physical exam')),
                ('assessment', models.TextField(help_text='Diagnosis, clinical impression, differential diagnosis')),
                ('plan', models.TextField(help_text='Treatment plan, medications, follow-up')),
                ('chief_complaint', models.TextField()),
                ('history_present_illness', models.TextField()),
                ('review_of_systems', models.TextField(blank=True)),
                ('past_medical_history', models.TextField(blank=True)),
                ('medications', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('social_history', models.TextField(blank=True)),
                ('family_history', models.TextField(blank=True)),
                ('physical_examination', models.TextField()),
                ('vital_signs_data', models.JSONField(default=dict)),
                ('lab_results', models.TextField(blank=True)),
                ('imaging_results', models.TextField(blank=True)),
                ('ai_suggestions', models.TextField(blank=True)),
                ('ai_differential_diagnosis', models.TextField(blank=True)),
                ('ai_risk_assessment', models.TextField(blank=True)),
                ('template_used', models.CharField(blank=True, max_length=100)),
                ('is_template', models.BooleanField(default=False)),
                ('template_name', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='soap_notes', to='medicine.appointment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_soap_notes', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soap_notes', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_soap_notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('plan_type', models.CharField(choices=[('acute', 'Acute Care'), ('chronic', 'Chronic Care Management'), ('preventive', 'Preventive Care'), ('palliative', 'Palliative Care'), ('rehabilitation', 'Rehabilitation'), ('emergency', 'Emergency Treatment')], default='acute', max_length=15)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('discontinued', 'Discontinued'), ('modified', 'Modified')], default='active', max_length=15)),
                ('primary_diagnosis', models.TextField()),
                ('secondary_diagnoses', models.TextField(blank=True)),
                ('treatment_goals', models.TextField()),
                ('interventions', models.TextField()),
                ('medications', models.TextField()),
                ('therapies', models.TextField(blank=True)),
                ('lifestyle_modifications', models.TextField(blank=True)),
                ('monitoring_parameters', models.TextField()),
                ('follow_up_schedule', models.TextField()),
                ('expected_outcomes', models.TextField()),
                ('potential_complications', models.TextField(blank=True)),
                ('emergency_contact_instructions', models.TextField(blank=True)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('review_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_treatment_plans', to='medicine.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='medicine.patient')),
            ],
            options={
                'db_table': 'medicine_treatment_plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, help_text='Temperature in Celsius', null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True)),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='SpO2 percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('weight', models.FloatField(blank=True, help_text='Weight in kg', null=True)),
                ('height', models.FloatField(blank=True, help_text='Height in cm', null=True)),
                ('bmi', models.FloatField(blank=True, editable=False, null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='medicine.patient')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medicine_vital_signs',
                'ordering': ['-recorded_at'],
            },
        ),
    ]
