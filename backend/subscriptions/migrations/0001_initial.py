# Generated by Django 5.2.4 on 2025-07-23 05:27

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price_monthly', models.DecimalField(decimal_places=2, help_text='Individual service price if offered a la carte, or for plan value calculation.', max_digits=6)),
                ('app_suite', models.CharField(choices=[('SecureNeat', 'SecureNeat'), ('RadiologySuite', 'Radiology Suite'), ('General', 'General')], max_length=20)),
                ('usage_unit_name', models.CharField(blank=True, help_text='e.g., API Calls, Documents, Chat Messages, PDFs Processed', max_length=50, null=True)),
                ('is_metered', models.BooleanField(default=False, help_text='Is usage for this service tracked against plan limits?')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_gateway_customer_id', models.CharField(help_text='Customer ID from payment gateway (e.g., Stripe cus_xxx)', max_length=255)),
                ('payment_gateway_method_id', models.CharField(help_text='Payment method ID from payment gateway (e.g., Stripe pm_xxx)', max_length=255, unique=True)),
                ('card_brand', models.CharField(choices=[('visa', 'Visa'), ('mastercard', 'Mastercard'), ('amex', 'American Express'), ('discover', 'Discover'), ('diners_club', 'Diners Club'), ('jcb', 'JCB'), ('unionpay', 'UnionPay'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('last4', models.CharField(max_length=4)),
                ('exp_month', models.PositiveIntegerField()),
                ('exp_year', models.PositiveIntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price_monthly', models.DecimalField(decimal_places=2, max_digits=6)),
                ('currency', models.CharField(choices=[('USD', '$'), ('INR', 'â‚¹')], default='USD', help_text="Currency for the plan's price (e.g., USD, INR, EUR)", max_length=3)),
                ('is_active', models.BooleanField(default=True, help_text='Is this plan available for new subscriptions?')),
                ('limit_chatbot_messages', models.PositiveIntegerField(blank=True, help_text='Monthly limit for Dr. Max messages. Null for unlimited.', null=True)),
                ('limit_mcq_generations', models.PositiveIntegerField(blank=True, help_text='Monthly limit for MCQ generations. Null for unlimited.', null=True)),
                ('limit_report_analyses', models.PositiveIntegerField(blank=True, help_text='Monthly limit for radiology report analyses. Null for unlimited.', null=True)),
                ('limit_document_anonymizations', models.PositiveIntegerField(blank=True, help_text='Monthly limit for document anonymizations. Null for unlimited.', null=True)),
                ('services', models.ManyToManyField(related_name='plans_included_in', to='subscriptions.service')),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(help_text='Date when the current billing cycle ends or access expires.')),
                ('status', models.CharField(choices=[('active', 'Active'), ('trial', 'Trial'), ('pending_payment', 'Pending Payment'), ('past_due', 'Past Due'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending_payment', max_length=20)),
                ('payment_gateway_subscription_id', models.CharField(blank=True, help_text='Subscription ID from payment gateway (e.g., Stripe sub_xxx)', max_length=255, null=True, unique=True)),
                ('auto_renew', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_subscriptions_to_plan', to='subscriptions.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-end_date', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='BillingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_gateway_invoice_id', models.CharField(blank=True, help_text='Invoice ID from payment gateway (e.g., Stripe in_xxx)', max_length=255, null=True, unique=True)),
                ('payment_gateway_charge_id', models.CharField(blank=True, help_text='Charge/PaymentIntent ID from payment gateway (e.g., Stripe pi_xxx or ch_xxx)', max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_paid', models.DateTimeField(blank=True, null=True)),
                ('plan_name_snapshot', models.CharField(help_text='Snapshot of the plan name at time of billing', max_length=100)),
                ('amount_due', models.DecimalField(decimal_places=2, max_digits=8)),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('currency', models.CharField(default='usd', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('invoice_pdf_url', models.URLField(blank=True, help_text='Link to the invoice PDF from payment gateway', null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_history', to=settings.AUTH_USER_MODEL)),
                ('user_subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='subscriptions.usersubscription')),
            ],
            options={
                'verbose_name_plural': 'Billing Histories',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='ServiceUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('period_start_date', models.DateField()),
                ('period_end_date', models.DateField()),
                ('last_recorded_usage_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='subscriptions.service')),
                ('user_subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_usages', to='subscriptions.usersubscription')),
            ],
            options={
                'ordering': ['-period_start_date', 'service__name'],
                'unique_together': {('user_subscription', 'service', 'period_start_date')},
            },
        ),
    ]
