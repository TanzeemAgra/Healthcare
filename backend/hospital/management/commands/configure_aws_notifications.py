# Management command to configure AWS notification settings
# This command helps set up AWS SNS and SES configuration

import os
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = 'Configure AWS notification settings for SNS and SES'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--access-key',
            type=str,
            help='AWS Access Key ID'
        )
        
        parser.add_argument(
            '--secret-key',
            type=str,
            help='AWS Secret Access Key'
        )
        
        parser.add_argument(
            '--region',
            type=str,
            default='us-east-1',
            help='AWS Region (default: us-east-1)'
        )
        
        parser.add_argument(
            '--from-email',
            type=str,
            default='info@xerxez.in',
            help='SES From Email Address (must be verified) - Default: info@xerxez.in'
        )
        
        parser.add_argument(
            '--sender-id',
            type=str,
            default='Healthcare',
            help='SNS SMS Sender ID (default: Healthcare)'
        )
        
        parser.add_argument(
            '--env-file',
            action='store_true',
            help='Generate .env file instead of updating settings.py'
        )
        
        parser.add_argument(
            '--interactive',
            action='store_true',
            help='Interactive mode to input settings'
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîß AWS Notification Configuration Setup')
        )
        
        # Interactive mode
        if options['interactive']:
            config = self.get_interactive_config()
        else:
            config = {
                'access_key': options['access_key'],
                'secret_key': options['secret_key'],
                'region': options['region'],
                'from_email': options['from_email'],
                'sender_id': options['sender_id']
            }
        
        # Validate required fields
        if not config['access_key'] or not config['secret_key'] or not config['from_email']:
            self.stdout.write(
                self.style.ERROR('‚ùå Access key, secret key, and from email are required')
            )
            return
        
        # Generate configuration
        if options['env_file']:
            self.generate_env_file(config)
        else:
            self.show_settings_config(config)
        
        self.show_next_steps(config)
    
    def get_interactive_config(self):
        """Get configuration through interactive prompts"""
        config = {}
        
        self.stdout.write('\nüìù Enter your AWS configuration:')
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Verified sender email available: info@xerxez.in')
        )
        
        config['access_key'] = input('AWS Access Key ID: ').strip()
        config['secret_key'] = input('AWS Secret Access Key: ').strip()
        config['region'] = input('AWS Region [us-east-1]: ').strip() or 'us-east-1'
        
        # Default to verified email with option to change
        default_email = input(f'SES From Email [info@xerxez.in]: ').strip()
        config['from_email'] = default_email or 'info@xerxez.in'
        
        config['sender_id'] = input('SNS Sender ID [Healthcare]: ').strip() or 'Healthcare'
        
        return config
    
    def generate_env_file(self, config):
        """Generate .env file with AWS configuration"""
        env_path = os.path.join(os.getcwd(), '.env')
        
        env_content = f"""# AWS Notification Configuration
# Generated by Django management command

# AWS Credentials
AWS_ACCESS_KEY_ID={config['access_key']}
AWS_SECRET_ACCESS_KEY={config['secret_key']}
AWS_REGION={config['region']}

# AWS SES Configuration
AWS_SES_FROM_EMAIL={config['from_email']}

# AWS SNS Configuration
AWS_SNS_SENDER_ID={config['sender_id']}

# Optional: Additional AWS settings
# AWS_SES_CONFIGURATION_SET=healthcare-notifications
# AWS_SNS_TOPIC_ARN=arn:aws:sns:{config['region']}:123456789:healthcare-alerts
"""
        
        try:
            with open(env_path, 'w') as f:
                f.write(env_content)
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ .env file created at {env_path}')
            )
            
            self.stdout.write(
                self.style.WARNING(
                    '\n‚ö†Ô∏è  Add this to your settings.py to load environment variables:\n'
                    '\nimport os\n'
                    'from dotenv import load_dotenv\n\n'
                    'load_dotenv()\n\n'
                    'AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")\n'
                    'AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")\n'
                    'AWS_REGION = os.getenv("AWS_REGION")\n'
                    'AWS_SES_FROM_EMAIL = os.getenv("AWS_SES_FROM_EMAIL")\n'
                    'AWS_SNS_SENDER_ID = os.getenv("AWS_SNS_SENDER_ID")\n'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Failed to create .env file: {e}')
            )
    
    def show_settings_config(self, config):
        """Show settings.py configuration"""
        settings_config = f"""
# Add these lines to your settings.py file:

# AWS Notification Configuration
AWS_ACCESS_KEY_ID = '{config['access_key']}'
AWS_SECRET_ACCESS_KEY = '{config['secret_key']}'
AWS_REGION = '{config['region']}'

# AWS SES Configuration
AWS_SES_FROM_EMAIL = '{config['from_email']}'

# AWS SNS Configuration  
AWS_SNS_SENDER_ID = '{config['sender_id']}'

# Optional: Additional AWS settings
# AWS_SES_CONFIGURATION_SET = 'healthcare-notifications'
# AWS_SNS_TOPIC_ARN = 'arn:aws:sns:{config['region']}:123456789:healthcare-alerts'
"""
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Configuration ready for settings.py:')
        )
        self.stdout.write(settings_config)
        
        self.stdout.write(
            self.style.WARNING(
                '‚ö†Ô∏è  For production, use environment variables instead of hardcoding credentials'
            )
        )
    
    def show_next_steps(self, config):
        """Show next steps after configuration"""
        self.stdout.write(
            self.style.HTTP_INFO('\nüöÄ Next Steps:')
        )
        
        steps = [
            '1. üîê Verify your AWS credentials have proper permissions',
            '2. üìß Verify your email address in AWS SES console',
            '3. üì± Configure SMS settings in AWS SNS console',
            '4. üß™ Run test: python manage.py test_aws_notifications',
            '5. üåê Test API endpoint: GET /api/hospital/notifications/aws-status/',
            '6. üìä Monitor AWS CloudWatch for delivery metrics'
        ]
        
        for step in steps:
            self.stdout.write(f'   {step}')
        
        # Show IAM policy
        self.stdout.write(
            self.style.HTTP_INFO('\nüîí Required IAM Policy:')
        )
        
        iam_policy = f'''{{
    "Version": "2012-10-17",
    "Statement": [
        {{
            "Effect": "Allow",
            "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail", 
                "ses:GetSendQuota",
                "ses:GetSendStatistics"
            ],
            "Resource": "*"
        }},
        {{
            "Effect": "Allow",
            "Action": [
                "sns:Publish",
                "sns:ListTopics",
                "sns:GetSMSAttributes"
            ],
            "Resource": "*"
        }}
    ]
}}'''
        
        self.stdout.write(iam_policy)
        
        # Show test commands
        self.stdout.write(
            self.style.HTTP_INFO('\nüß™ Test Commands:')
        )
        self.stdout.write('   python test_aws_notifications.py')
        self.stdout.write('   python manage.py setup_notification_templates')
        
        # Show API examples
        self.stdout.write(
            self.style.HTTP_INFO('\nüì° Example API Call:')
        )
        
        api_example = f'''curl -X POST http://localhost:8000/api/hospital/notifications/appointment-reminder/ \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \\
  -d '{{
    "patient_email": "patient@example.com",
    "patient_phone": "+1234567890", 
    "patient_name": "John Doe",
    "appointment_date": "2024-01-15",
    "appointment_time": "10:00 AM",
    "doctor_name": "Dr. Smith",
    "clinic_name": "AWS Healthcare Clinic"
  }}'
'''
        
        self.stdout.write(api_example)
