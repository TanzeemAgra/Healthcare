# Generated by Django 4.2.7 on 2025-09-21 09:02

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hospital.models
import hospital.registration_document_models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("full_name", models.CharField(max_length=100)),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("super_admin", "Super Administrator"),
                            ("admin", "Administrator"),
                            ("doctor", "Doctor"),
                            ("nurse", "Nurse"),
                            ("patient", "Patient"),
                            ("pharmacist", "Pharmacist"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "license_number",
                    models.CharField(
                        blank=True,
                        help_text="Medical license for doctors",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "certification",
                    models.CharField(
                        blank=True,
                        help_text="Certification for nurses",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "specialization",
                    models.CharField(
                        blank=True,
                        help_text="Medical specialization for doctors",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Email verification status"
                    ),
                ),
                (
                    "verification_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "password_change_required",
                    models.BooleanField(
                        default=False, help_text="Force password change on next login"
                    ),
                ),
                (
                    "first_login_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user has completed first login setup",
                    ),
                ),
                (
                    "password_changed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last password change timestamp",
                        null=True,
                    ),
                ),
                (
                    "temp_password_expires",
                    models.DateTimeField(
                        blank=True, help_text="Temporary password expiration", null=True
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0, help_text="Failed login attempt counter"
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True, help_text="Account lockout expiration", null=True
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="hospital_customuser_set",
                        related_query_name="hospital_customuser",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="hospital_customuser_set",
                        related_query_name="hospital_customuser",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", hospital.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="NotificationTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("template_type", models.CharField(max_length=50, unique=True)),
                ("subject_template", models.CharField(max_length=255)),
                ("email_template", models.TextField()),
                ("sms_template", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "notification_templates",
            },
        ),
        migrations.CreateModel(
            name="RegistrationDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Uploaded document file",
                        upload_to=hospital.registration_document_models.registration_document_upload_path,
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        help_text="Original filename as uploaded by user",
                        max_length=255,
                    ),
                ),
                ("file_size", models.BigIntegerField(help_text="File size in bytes")),
                (
                    "mime_type",
                    models.CharField(
                        help_text="MIME type of the uploaded file", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("uploaded", "Uploaded"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="uploaded",
                        max_length=20,
                    ),
                ),
                (
                    "validation_status",
                    models.JSONField(
                        default=dict, help_text="Detailed validation results"
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Administrator notes about the document"
                    ),
                ),
                (
                    "upload_ip",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address of uploader", null=True
                    ),
                ),
                (
                    "access_count",
                    models.IntegerField(
                        default=0, help_text="Number of times document was accessed"
                    ),
                ),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional document metadata"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Document expiry date (for licenses etc.)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Registration Document",
                "verbose_name_plural": "Registration Documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RegistrationDocumentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Document type name", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this document should contain"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        help_text="Document category for organization", max_length=50
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True, help_text="Whether this document is mandatory"
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        default="medium",
                        help_text="Priority level for review",
                        max_length=20,
                    ),
                ),
                (
                    "file_size_limit_mb",
                    models.IntegerField(
                        default=10, help_text="Maximum file size in MB"
                    ),
                ),
                (
                    "allowed_extensions",
                    models.JSONField(default=list, help_text="Allowed file extensions"),
                ),
                (
                    "display_order",
                    models.IntegerField(
                        default=0, help_text="Order for display in forms"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this document type is currently used",
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        default=dict, help_text="Custom validation rules in JSON format"
                    ),
                ),
                (
                    "help_text",
                    models.TextField(blank=True, help_text="Help text to show users"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Registration Document Type",
                "verbose_name_plural": "Registration Document Types",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("survey_name", models.CharField(max_length=100)),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("income_growth", "Income Growth"),
                            ("patient_satisfaction", "Patient Satisfaction"),
                            ("staff_performance", "Staff Performance"),
                            ("bed_occupancy", "Bed Occupancy"),
                        ],
                        max_length=50,
                    ),
                ),
                ("value", models.DecimalField(decimal_places=2, max_digits=6)),
                ("unit", models.CharField(default="%", max_length=20)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="PatientProfile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="patientprofile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("blood_group", models.CharField(blank=True, max_length=5, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("address", models.TextField(blank=True, null=True)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("medical_history", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="StaffProfile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="staffprofile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("department", models.CharField(blank=True, max_length=100, null=True)),
                ("position", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("address", models.TextField(blank=True, null=True)),
                ("join_date", models.DateField(blank=True, null=True)),
                (
                    "salary",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserFeatureProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "selected_features",
                    models.JSONField(
                        default=list, help_text="List of selected feature codes"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserCreationQuota",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True, help_text="Whether quota limits are enabled"
                    ),
                ),
                ("max_total_users", models.PositiveIntegerField(default=50)),
                ("max_doctors", models.PositiveIntegerField(default=10)),
                ("max_nurses", models.PositiveIntegerField(default=15)),
                ("max_patients", models.PositiveIntegerField(default=20)),
                ("max_pharmacists", models.PositiveIntegerField(default=5)),
                (
                    "quota_reset_period",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                            ("never", "Never"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                ("last_reset", models.DateTimeField(default=django.utils.timezone.now)),
                ("current_total_users", models.PositiveIntegerField(default=0)),
                ("current_doctors", models.PositiveIntegerField(default=0)),
                ("current_nurses", models.PositiveIntegerField(default=0)),
                ("current_patients", models.PositiveIntegerField(default=0)),
                ("current_pharmacists", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creation_quota",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegistrationDocumentAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        choices=[
                            ("view", "View"),
                            ("download", "Download"),
                            ("edit", "Edit"),
                            ("delete", "Delete"),
                            ("admin_review", "Admin Review"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "access_ip",
                    models.GenericIPAddressField(help_text="IP address of accessor"),
                ),
                (
                    "user_agent",
                    models.TextField(help_text="Browser/client information"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "accessed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="hospital.registrationdocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Document Access Log",
                "verbose_name_plural": "Document Access Logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="registrationdocument",
            name="document_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="hospital.registrationdocumenttype",
            ),
        ),
        migrations.AddField(
            model_name="registrationdocument",
            name="reviewed_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reviewed_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="registrationdocument",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="registration_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_appointment_reminders", models.BooleanField(default=True)),
                ("sms_appointment_reminders", models.BooleanField(default=True)),
                ("email_system_alerts", models.BooleanField(default=True)),
                ("email_compliance_notifications", models.BooleanField(default=True)),
                ("email_credential_warnings", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notification_preferences",
            },
        ),
        migrations.CreateModel(
            name="NotificationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("registration_confirmation", "Registration Confirmation"),
                            ("admin_approval_required", "Admin Approval Required"),
                            ("account_approved", "Account Approved"),
                            ("password_reset", "Password Reset"),
                            (
                                "appointment_reminder_email",
                                "Appointment Reminder Email",
                            ),
                            ("appointment_reminder_sms", "Appointment Reminder SMS"),
                            ("credential_expiry_warning", "Credential Expiry Warning"),
                            ("compliance_notification", "Compliance Notification"),
                            ("system_alert", "System Alert"),
                        ],
                        max_length=50,
                    ),
                ),
                ("recipient", models.CharField(max_length=255)),
                ("success", models.BooleanField(default=False)),
                (
                    "service_used",
                    models.CharField(
                        choices=[
                            ("ses", "AWS SES"),
                            ("sns", "AWS SNS"),
                            ("django_smtp", "Django SMTP"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("message_id", models.CharField(blank=True, max_length=255)),
                ("error_message", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notification_logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="IncomeReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("income_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "income_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "recorded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recorded_income_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeatureAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feature",
                    models.CharField(
                        choices=[
                            ("medicine", "General Medicine"),
                            ("dentistry", "Dentistry"),
                            ("dermatology", "Dermatology"),
                            ("pathology", "Pathology"),
                            ("radiology", "Radiology"),
                            ("patients", "Patient Management"),
                            ("subscriptions", "Subscription Management"),
                            ("hospital", "Hospital Management"),
                            ("secureneat", "SecureNeat Security"),
                            ("appointments", "Appointment Scheduling"),
                            ("billing", "Billing & Payments"),
                            ("reports", "Reports & Analytics"),
                            ("emergency", "Emergency Services"),
                            ("pharmacy", "Pharmacy Management"),
                            ("lab_tests", "Laboratory Tests"),
                            ("imaging", "Medical Imaging"),
                            ("telemedicine", "Telemedicine"),
                            ("ai_diagnosis", "AI-Powered Diagnosis"),
                            ("diabetes_management", "Diabetes Management"),
                            ("cancer_detection", "Cancer Detection"),
                        ],
                        max_length=50,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Feature Access",
                "verbose_name_plural": "Feature Access",
            },
        ),
        migrations.CreateModel(
            name="Appointment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("appointment_date", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "doctor",
                    models.ForeignKey(
                        limit_choices_to={"role": "doctor"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="doctor_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminPermissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("can_manage_users", models.BooleanField(default=True)),
                ("can_view_reports", models.BooleanField(default=True)),
                ("can_manage_departments", models.BooleanField(default=True)),
                ("can_access_billing", models.BooleanField(default=False)),
                ("can_manage_inventory", models.BooleanField(default=False)),
                ("can_access_emergency", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminDashboardFeatures",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_management", models.BooleanField(default=True)),
                ("patient_management", models.BooleanField(default=True)),
                ("doctor_management", models.BooleanField(default=False)),
                ("nurse_management", models.BooleanField(default=False)),
                ("pharmacist_management", models.BooleanField(default=False)),
                ("hospital_management", models.BooleanField(default=False)),
                ("clinic_management", models.BooleanField(default=False)),
                ("all_doctors", models.BooleanField(default=False)),
                ("add_doctors", models.BooleanField(default=False)),
                ("doctor_profile", models.BooleanField(default=False)),
                ("medicine_module", models.BooleanField(default=False)),
                ("dentistry_module", models.BooleanField(default=False)),
                ("dermatology_module", models.BooleanField(default=False)),
                ("pathology_module", models.BooleanField(default=False)),
                ("radiology_module", models.BooleanField(default=False)),
                ("homeopathy_module", models.BooleanField(default=False)),
                ("allopathy_module", models.BooleanField(default=False)),
                ("cosmetology_module", models.BooleanField(default=False)),
                ("dna_sequencing_module", models.BooleanField(default=False)),
                ("secureneat_module", models.BooleanField(default=False)),
                ("subscription_management", models.BooleanField(default=False)),
                ("billing_reports", models.BooleanField(default=False)),
                ("financial_dashboard", models.BooleanField(default=False)),
                ("system_settings", models.BooleanField(default=False)),
                ("audit_logs", models.BooleanField(default=False)),
                ("user_analytics", models.BooleanField(default=True)),
                ("medical_reports", models.BooleanField(default=False)),
                ("revenue_reports", models.BooleanField(default=False)),
                ("appointment_analytics", models.BooleanField(default=False)),
                ("inventory_reports", models.BooleanField(default=False)),
                ("create_user", models.BooleanField(default=True)),
                ("schedule_appointment", models.BooleanField(default=False)),
                ("generate_report", models.BooleanField(default=True)),
                ("backup_system", models.BooleanField(default=False)),
                ("send_notifications", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_features",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScheduledNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notification_type", models.CharField(max_length=50)),
                ("recipient_email", models.EmailField(blank=True, max_length=254)),
                ("recipient_phone", models.CharField(blank=True, max_length=20)),
                ("subject", models.CharField(max_length=255)),
                ("message_data", models.JSONField()),
                ("scheduled_time", models.DateTimeField()),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("attempts", models.PositiveIntegerField(default=0)),
                ("max_attempts", models.PositiveIntegerField(default=3)),
                ("last_attempt", models.DateTimeField(blank=True, null=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "scheduled_notifications",
                "ordering": ["scheduled_time", "priority"],
                "indexes": [
                    models.Index(fields=["status"], name="sched_notif_status_idx"),
                    models.Index(
                        fields=["scheduled_time"], name="sched_notif_time_idx"
                    ),
                    models.Index(fields=["priority"], name="sched_notif_priority_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="RegistrationDocumentTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Template name", max_length=100)),
                ("description", models.TextField(help_text="Template description")),
                (
                    "role",
                    models.CharField(
                        help_text="Target role for this template", max_length=50
                    ),
                ),
                (
                    "region",
                    models.CharField(help_text="Geographic region", max_length=20),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", help_text="Template version", max_length=10
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        default=dict, help_text="Detailed requirements in JSON format"
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        default=dict, help_text="Validation rules for this template"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "document_types",
                    models.ManyToManyField(
                        help_text="Required document types",
                        to="hospital.registrationdocumenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registration Document Template",
                "verbose_name_plural": "Registration Document Templates",
                "ordering": ["name", "-version"],
                "unique_together": {("name", "version")},
            },
        ),
        migrations.AddIndex(
            model_name="registrationdocument",
            index=models.Index(
                fields=["user", "document_type"], name="hospital_re_user_id_c585a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="registrationdocument",
            index=models.Index(fields=["status"], name="hospital_re_status_459202_idx"),
        ),
        migrations.AddIndex(
            model_name="registrationdocument",
            index=models.Index(
                fields=["created_at"], name="hospital_re_created_3a3b4c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationlog",
            index=models.Index(
                fields=["notification_type"], name="notif_logs_type_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notificationlog",
            index=models.Index(fields=["recipient"], name="notif_logs_recipient_idx"),
        ),
        migrations.AddIndex(
            model_name="notificationlog",
            index=models.Index(fields=["success"], name="notif_logs_success_idx"),
        ),
        migrations.AddIndex(
            model_name="notificationlog",
            index=models.Index(fields=["timestamp"], name="notif_logs_timestamp_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="featureaccess",
            unique_together={("user", "feature")},
        ),
    ]
